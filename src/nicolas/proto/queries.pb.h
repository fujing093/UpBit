// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/queries.proto

#ifndef PROTOBUF_proto_2fqueries_2eproto__INCLUDED
#define PROTOBUF_proto_2fqueries_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Caius {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fqueries_2eproto();
void protobuf_AssignDesc_proto_2fqueries_2eproto();
void protobuf_ShutdownFile_proto_2fqueries_2eproto();

class Queries;
class Queries_Query;

enum Queries_Query_QueryType {
  Queries_Query_QueryType_RANGE_SEARCH = 0,
  Queries_Query_QueryType_EQUAL_SEARCH = 1,
  Queries_Query_QueryType_DELETE = 2
};
bool Queries_Query_QueryType_IsValid(int value);
const Queries_Query_QueryType Queries_Query_QueryType_QueryType_MIN = Queries_Query_QueryType_RANGE_SEARCH;
const Queries_Query_QueryType Queries_Query_QueryType_QueryType_MAX = Queries_Query_QueryType_DELETE;
const int Queries_Query_QueryType_QueryType_ARRAYSIZE = Queries_Query_QueryType_QueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Queries_Query_QueryType_descriptor();
inline const ::std::string& Queries_Query_QueryType_Name(Queries_Query_QueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Queries_Query_QueryType_descriptor(), value);
}
inline bool Queries_Query_QueryType_Parse(
    const ::std::string& name, Queries_Query_QueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Queries_Query_QueryType>(
    Queries_Query_QueryType_descriptor(), name, value);
}
// ===================================================================

class Queries_Query : public ::google::protobuf::Message {
 public:
  Queries_Query();
  virtual ~Queries_Query();

  Queries_Query(const Queries_Query& from);

  inline Queries_Query& operator=(const Queries_Query& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Queries_Query& default_instance();

  void Swap(Queries_Query* other);

  // implements Message ----------------------------------------------

  Queries_Query* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Queries_Query& from);
  void MergeFrom(const Queries_Query& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Queries_Query_QueryType QueryType;
  static const QueryType RANGE_SEARCH = Queries_Query_QueryType_RANGE_SEARCH;
  static const QueryType EQUAL_SEARCH = Queries_Query_QueryType_EQUAL_SEARCH;
  static const QueryType DELETE = Queries_Query_QueryType_DELETE;
  static inline bool QueryType_IsValid(int value) {
    return Queries_Query_QueryType_IsValid(value);
  }
  static const QueryType QueryType_MIN =
    Queries_Query_QueryType_QueryType_MIN;
  static const QueryType QueryType_MAX =
    Queries_Query_QueryType_QueryType_MAX;
  static const int QueryType_ARRAYSIZE =
    Queries_Query_QueryType_QueryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueryType_descriptor() {
    return Queries_Query_QueryType_descriptor();
  }
  static inline const ::std::string& QueryType_Name(QueryType value) {
    return Queries_Query_QueryType_Name(value);
  }
  static inline bool QueryType_Parse(const ::std::string& name,
      QueryType* value) {
    return Queries_Query_QueryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string where = 3;
  inline bool has_where() const;
  inline void clear_where();
  static const int kWhereFieldNumber = 3;
  inline const ::std::string& where() const;
  inline void set_where(const ::std::string& value);
  inline void set_where(const char* value);
  inline void set_where(const char* value, size_t size);
  inline ::std::string* mutable_where();
  inline ::std::string* release_where();
  inline void set_allocated_where(::std::string* where);

  // required .Caius.Queries.Query.QueryType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Caius::Queries_Query_QueryType type() const;
  inline void set_type(::Caius::Queries_Query_QueryType value);

  // @@protoc_insertion_point(class_scope:Caius.Queries.Query)
 private:
  inline void set_has_where();
  inline void clear_has_where();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* where_;
  int type_;
  friend void  protobuf_AddDesc_proto_2fqueries_2eproto();
  friend void protobuf_AssignDesc_proto_2fqueries_2eproto();
  friend void protobuf_ShutdownFile_proto_2fqueries_2eproto();

  void InitAsDefaultInstance();
  static Queries_Query* default_instance_;
};
// -------------------------------------------------------------------

class Queries : public ::google::protobuf::Message {
 public:
  Queries();
  virtual ~Queries();

  Queries(const Queries& from);

  inline Queries& operator=(const Queries& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Queries& default_instance();

  void Swap(Queries* other);

  // implements Message ----------------------------------------------

  Queries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Queries& from);
  void MergeFrom(const Queries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Queries_Query Query;

  // accessors -------------------------------------------------------

  // repeated .Caius.Queries.Query query = 5;
  inline int query_size() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 5;
  inline const ::Caius::Queries_Query& query(int index) const;
  inline ::Caius::Queries_Query* mutable_query(int index);
  inline ::Caius::Queries_Query* add_query();
  inline const ::google::protobuf::RepeatedPtrField< ::Caius::Queries_Query >&
      query() const;
  inline ::google::protobuf::RepeatedPtrField< ::Caius::Queries_Query >*
      mutable_query();

  // @@protoc_insertion_point(class_scope:Caius.Queries)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Caius::Queries_Query > query_;
  friend void  protobuf_AddDesc_proto_2fqueries_2eproto();
  friend void protobuf_AssignDesc_proto_2fqueries_2eproto();
  friend void protobuf_ShutdownFile_proto_2fqueries_2eproto();

  void InitAsDefaultInstance();
  static Queries* default_instance_;
};
// ===================================================================


// ===================================================================

// Queries_Query

// required string where = 3;
inline bool Queries_Query::has_where() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Queries_Query::set_has_where() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Queries_Query::clear_has_where() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Queries_Query::clear_where() {
  if (where_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    where_->clear();
  }
  clear_has_where();
}
inline const ::std::string& Queries_Query::where() const {
  // @@protoc_insertion_point(field_get:Caius.Queries.Query.where)
  return *where_;
}
inline void Queries_Query::set_where(const ::std::string& value) {
  set_has_where();
  if (where_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    where_ = new ::std::string;
  }
  where_->assign(value);
  // @@protoc_insertion_point(field_set:Caius.Queries.Query.where)
}
inline void Queries_Query::set_where(const char* value) {
  set_has_where();
  if (where_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    where_ = new ::std::string;
  }
  where_->assign(value);
  // @@protoc_insertion_point(field_set_char:Caius.Queries.Query.where)
}
inline void Queries_Query::set_where(const char* value, size_t size) {
  set_has_where();
  if (where_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    where_ = new ::std::string;
  }
  where_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Caius.Queries.Query.where)
}
inline ::std::string* Queries_Query::mutable_where() {
  set_has_where();
  if (where_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    where_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Caius.Queries.Query.where)
  return where_;
}
inline ::std::string* Queries_Query::release_where() {
  clear_has_where();
  if (where_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = where_;
    where_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Queries_Query::set_allocated_where(::std::string* where) {
  if (where_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete where_;
  }
  if (where) {
    set_has_where();
    where_ = where;
  } else {
    clear_has_where();
    where_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Caius.Queries.Query.where)
}

// required .Caius.Queries.Query.QueryType type = 4;
inline bool Queries_Query::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Queries_Query::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Queries_Query::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Queries_Query::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Caius::Queries_Query_QueryType Queries_Query::type() const {
  // @@protoc_insertion_point(field_get:Caius.Queries.Query.type)
  return static_cast< ::Caius::Queries_Query_QueryType >(type_);
}
inline void Queries_Query::set_type(::Caius::Queries_Query_QueryType value) {
  assert(::Caius::Queries_Query_QueryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Caius.Queries.Query.type)
}

// -------------------------------------------------------------------

// Queries

// repeated .Caius.Queries.Query query = 5;
inline int Queries::query_size() const {
  return query_.size();
}
inline void Queries::clear_query() {
  query_.Clear();
}
inline const ::Caius::Queries_Query& Queries::query(int index) const {
  // @@protoc_insertion_point(field_get:Caius.Queries.query)
  return query_.Get(index);
}
inline ::Caius::Queries_Query* Queries::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:Caius.Queries.query)
  return query_.Mutable(index);
}
inline ::Caius::Queries_Query* Queries::add_query() {
  // @@protoc_insertion_point(field_add:Caius.Queries.query)
  return query_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Caius::Queries_Query >&
Queries::query() const {
  // @@protoc_insertion_point(field_list:Caius.Queries.query)
  return query_;
}
inline ::google::protobuf::RepeatedPtrField< ::Caius::Queries_Query >*
Queries::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:Caius.Queries.query)
  return &query_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Caius

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Caius::Queries_Query_QueryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Caius::Queries_Query_QueryType>() {
  return ::Caius::Queries_Query_QueryType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fqueries_2eproto__INCLUDED
