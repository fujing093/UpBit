// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/queries.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/queries.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Caius {

namespace {

const ::google::protobuf::Descriptor* Queries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Queries_reflection_ = NULL;
const ::google::protobuf::Descriptor* Queries_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Queries_Query_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Queries_Query_QueryType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fqueries_2eproto() {
  protobuf_AddDesc_proto_2fqueries_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/queries.proto");
  GOOGLE_CHECK(file != NULL);
  Queries_descriptor_ = file->message_type(0);
  static const int Queries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queries, query_),
  };
  Queries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Queries_descriptor_,
      Queries::default_instance_,
      Queries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Queries));
  Queries_Query_descriptor_ = Queries_descriptor_->nested_type(0);
  static const int Queries_Query_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queries_Query, where_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queries_Query, type_),
  };
  Queries_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Queries_Query_descriptor_,
      Queries_Query::default_instance_,
      Queries_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queries_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queries_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Queries_Query));
  Queries_Query_QueryType_descriptor_ = Queries_Query_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fqueries_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Queries_descriptor_, &Queries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Queries_Query_descriptor_, &Queries_Query::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fqueries_2eproto() {
  delete Queries::default_instance_;
  delete Queries_reflection_;
  delete Queries_Query::default_instance_;
  delete Queries_Query_reflection_;
}

void protobuf_AddDesc_proto_2fqueries_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023proto/queries.proto\022\005Caius\"\262\001\n\007Queries"
    "\022#\n\005query\030\005 \003(\0132\024.Caius.Queries.Query\032\201\001"
    "\n\005Query\022\r\n\005where\030\003 \002(\t\022,\n\004type\030\004 \002(\0162\036.C"
    "aius.Queries.Query.QueryType\";\n\tQueryTyp"
    "e\022\020\n\014RANGE_SEARCH\020\000\022\020\n\014EQUAL_SEARCH\020\001\022\n\n"
    "\006DELETE\020\002", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/queries.proto", &protobuf_RegisterTypes);
  Queries::default_instance_ = new Queries();
  Queries_Query::default_instance_ = new Queries_Query();
  Queries::default_instance_->InitAsDefaultInstance();
  Queries_Query::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fqueries_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fqueries_2eproto {
  StaticDescriptorInitializer_proto_2fqueries_2eproto() {
    protobuf_AddDesc_proto_2fqueries_2eproto();
  }
} static_descriptor_initializer_proto_2fqueries_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Queries_Query_QueryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Queries_Query_QueryType_descriptor_;
}
bool Queries_Query_QueryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Queries_Query_QueryType Queries_Query::RANGE_SEARCH;
const Queries_Query_QueryType Queries_Query::EQUAL_SEARCH;
const Queries_Query_QueryType Queries_Query::DELETE;
const Queries_Query_QueryType Queries_Query::QueryType_MIN;
const Queries_Query_QueryType Queries_Query::QueryType_MAX;
const int Queries_Query::QueryType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Queries_Query::kWhereFieldNumber;
const int Queries_Query::kTypeFieldNumber;
#endif  // !_MSC_VER

Queries_Query::Queries_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Caius.Queries.Query)
}

void Queries_Query::InitAsDefaultInstance() {
}

Queries_Query::Queries_Query(const Queries_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Caius.Queries.Query)
}

void Queries_Query::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  where_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Queries_Query::~Queries_Query() {
  // @@protoc_insertion_point(destructor:Caius.Queries.Query)
  SharedDtor();
}

void Queries_Query::SharedDtor() {
  if (where_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete where_;
  }
  if (this != default_instance_) {
  }
}

void Queries_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Queries_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Queries_Query_descriptor_;
}

const Queries_Query& Queries_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fqueries_2eproto();
  return *default_instance_;
}

Queries_Query* Queries_Query::default_instance_ = NULL;

Queries_Query* Queries_Query::New() const {
  return new Queries_Query;
}

void Queries_Query::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_where()) {
      if (where_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        where_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Queries_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Caius.Queries.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string where = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->where().data(), this->where().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "where");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .Caius.Queries.Query.QueryType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Caius::Queries_Query_QueryType_IsValid(value)) {
            set_type(static_cast< ::Caius::Queries_Query_QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Caius.Queries.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Caius.Queries.Query)
  return false;
#undef DO_
}

void Queries_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Caius.Queries.Query)
  // required string where = 3;
  if (has_where()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->where().data(), this->where().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "where");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->where(), output);
  }

  // required .Caius.Queries.Query.QueryType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Caius.Queries.Query)
}

::google::protobuf::uint8* Queries_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Caius.Queries.Query)
  // required string where = 3;
  if (has_where()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->where().data(), this->where().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "where");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->where(), target);
  }

  // required .Caius.Queries.Query.QueryType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Caius.Queries.Query)
  return target;
}

int Queries_Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string where = 3;
    if (has_where()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->where());
    }

    // required .Caius.Queries.Query.QueryType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Queries_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Queries_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Queries_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Queries_Query::MergeFrom(const Queries_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_where()) {
      set_where(from.where());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Queries_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Queries_Query::CopyFrom(const Queries_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Queries_Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Queries_Query::Swap(Queries_Query* other) {
  if (other != this) {
    std::swap(where_, other->where_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Queries_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Queries_Query_descriptor_;
  metadata.reflection = Queries_Query_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Queries::kQueryFieldNumber;
#endif  // !_MSC_VER

Queries::Queries()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Caius.Queries)
}

void Queries::InitAsDefaultInstance() {
}

Queries::Queries(const Queries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Caius.Queries)
}

void Queries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Queries::~Queries() {
  // @@protoc_insertion_point(destructor:Caius.Queries)
  SharedDtor();
}

void Queries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Queries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Queries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Queries_descriptor_;
}

const Queries& Queries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fqueries_2eproto();
  return *default_instance_;
}

Queries* Queries::default_instance_ = NULL;

Queries* Queries::New() const {
  return new Queries;
}

void Queries::Clear() {
  query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Queries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Caius.Queries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Caius.Queries.Query query = 5;
      case 5: {
        if (tag == 42) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_query;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Caius.Queries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Caius.Queries)
  return false;
#undef DO_
}

void Queries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Caius.Queries)
  // repeated .Caius.Queries.Query query = 5;
  for (int i = 0; i < this->query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->query(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Caius.Queries)
}

::google::protobuf::uint8* Queries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Caius.Queries)
  // repeated .Caius.Queries.Query query = 5;
  for (int i = 0; i < this->query_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->query(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Caius.Queries)
  return target;
}

int Queries::ByteSize() const {
  int total_size = 0;

  // repeated .Caius.Queries.Query query = 5;
  total_size += 1 * this->query_size();
  for (int i = 0; i < this->query_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Queries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Queries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Queries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Queries::MergeFrom(const Queries& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_.MergeFrom(from.query_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Queries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Queries::CopyFrom(const Queries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Queries::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->query())) return false;
  return true;
}

void Queries::Swap(Queries* other) {
  if (other != this) {
    query_.Swap(&other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Queries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Queries_descriptor_;
  metadata.reflection = Queries_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Caius

// @@protoc_insertion_point(global_scope)
